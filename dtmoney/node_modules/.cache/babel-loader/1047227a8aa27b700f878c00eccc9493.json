{"ast":null,"code":"var _jsxFileName = \"D:\\\\sites\\\\ignite\\\\dtmoney\\\\src\\\\hooks\\\\useTransactions.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput) {\n    const response = await api.post('/transactions', { ...transactionInput,\n      createdAt: new Date()\n    });\n    const {\n      transaction\n    } = response.data;\n    setTransactions([...transactions, transaction]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionsProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionsProvider;\nexport function useTransactions() {\n  _s2();\n\n  const context = useContext(TransactionsContext);\n  return context;\n}\n\n_s2(useTransactions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["D:/sites/ignite/dtmoney/src/hooks/useTransactions.tsx"],"names":["createContext","useState","useEffect","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transactionInput","post","createdAt","Date","transaction","useTransactions","context","useContext"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAA8D,OAA9D;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAuBA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAC5C,EAD4C,CAAzC;AAKP,OAAO,SAASK,oBAAT,CAA8B;AAACC,EAAAA;AAAD,CAA9B,EAAoE;AAAA;;AACvE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAgB,EAAhB,CAAhD;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACbC,IAAAA,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACKC,IADL,CACUC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADrC;AAEH,GAHQ,EAGP,EAHO,CAAT;;AAKA,iBAAeM,iBAAf,CAAkCC,gBAAlC,EAAsE;AAClE,UAAMH,QAAQ,GAAG,MAAMR,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0B,EAAC,GAAGD,gBAAJ;AAAsBE,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAAjC,KAA1B,CAAvB;AACA,UAAO;AAAEC,MAAAA;AAAF,QAAkBP,QAAQ,CAACC,IAAlC;AAEAJ,IAAAA,eAAe,CAAC,CACZ,GAAGD,YADS,EACKW,WADL,CAAD,CAAf;AAIH;;AAGD,sBACI,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAACX,MAAAA,YAAD;AAAeM,MAAAA;AAAf,KAArC;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAxBeD,oB;;KAAAA,oB;AA0BhB,OAAO,SAASc,eAAT,GAA0B;AAAA;;AAC7B,QAAMC,OAAO,GAAGC,UAAU,CAACjB,mBAAD,CAA1B;AACA,SAAOgB,OAAP;AACH;;IAHeD,e","sourcesContent":["import { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport { api } from '../services/api'\r\n\r\ninterface Transaction{\r\n    id: number,\r\n    title: string,\r\n    amount: number,\r\n    type: string,\r\n    category: string,\r\n    createdAt: string\r\n}\r\n\r\ntype TransactionInput  = Omit<Transaction, 'id' | 'createdAt'>; \r\n\r\ninterface TransactionsProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\ninterface TransactionsContextData{\r\n    transactions: Transaction[];\r\n    createTransaction: ( transaction: TransactionInput) => void;\r\n}\r\n\r\n\r\nexport const TransactionsContext = createContext<TransactionsContextData>(\r\n    {} as TransactionsContextData\r\n);\r\n\r\n\r\nexport function TransactionsProvider({children}:TransactionsProviderProps) {\r\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n    useEffect( () => {\r\n        api.get('transactions')\r\n            .then(response => setTransactions(response.data.transactions))\r\n    },[]);\r\n\r\n    async function createTransaction( transactionInput: TransactionInput) {\r\n        const response = await api.post('/transactions', {...transactionInput, createdAt: new Date(),})\r\n        const  { transaction } = response.data; \r\n\r\n        setTransactions([\r\n            ...transactions, transaction,\r\n        ]);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <TransactionsContext.Provider value={{transactions, createTransaction}}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useTransactions(){\r\n    const context = useContext(TransactionsContext);\r\n    return context;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}